const express = require('express');
const router = express.Router();
const { query } = require('../config/database');
const jwt = require('jsonwebtoken');

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
router.post('/create', async (req, res) => {
  try {
    console.log('üì® Create game request received:', req.body);
    
    const { title, gamemode, maxPlayers, totalRounds, isPrivate, password } = req.body;
    const token = req.headers.authorization?.split(' ')[1];
    
    if (!token) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret-key-change-in-production');
    console.log('üîÑ Creating room for user:', decoded.userId);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
    const gameResult = await query(`
      INSERT INTO games (title, gamemode, hostid, maxplayers, totalrounds, isprivate, roompassword, status)
      VALUES ($1, $2, $3, $4, $5, $6, $7, 'waiting')
      RETURNING *
    `, [
      title || '–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
      gamemode || 'classic',
      decoded.userId,
      maxPlayers || 8,
      totalRounds || 3,
      isPrivate || false,
      password || null
    ]);

    const newGame = gameResult.rows[0];
    console.log('‚úÖ Game created with ID:', newGame.gameid);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç–∞ –≤ –∏–≥—Ä–æ–∫–∏
    await query(`
      INSERT INTO game_players (gameid, userid, playerorder, ishost, score, ready)
      VALUES ($1, $2, $3, $4, $5, $6)
    `, [newGame.gameid, decoded.userId, 1, true, 0, false]);

    console.log('‚úÖ Host added to game players');
    
    res.status(201).json({
      message: '–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      game: newGame
    });
  } catch (error) {
    console.error('‚ùå Error creating game:', error);
    
    if (error.code === '23505') { // unique violation
      res.status(400).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    } else if (error.code === '23503') { // foreign key violation
      res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    } else {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ' + error.message });
    }
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
router.get('/active-rooms', async (req, res) => {
  try {
    console.log('üîÑ Fetching active rooms');
    
    const result = await query(`
      SELECT 
        g.gameid,
        g.title,
        g.gamemode,
        g.maxplayers,
        g.currentplayers,
        g.isprivate,
        g.status,
        g.currentround,
        g.totalrounds,
        g.createdat,
        u.login as hostname,
        COUNT(gp.userid) as players_count
      FROM games g
      LEFT JOIN users u ON g.hostid = u.userid
      LEFT JOIN game_players gp ON g.gameid = gp.gameid
      WHERE g.status IN ('waiting', 'playing')
      GROUP BY g.gameid, u.login
      ORDER BY g.createdat DESC
      LIMIT 20
    `);

    console.log('‚úÖ Active rooms fetched:', result.rows.length);
    res.json({
      rooms: result.rows
    });
  } catch (error) {
    console.error('‚ùå Error fetching active rooms:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–Ω–∞—Ç' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
router.get('/history', async (req, res) => {
  try {
    const result = await query(`
      SELECT 
        g.gameid,
        g.title,
        g.gamemode,
        g.status,
        g.currentplayers,
        g.maxplayers,
        g.createdat,
        g.totalrounds,
        u.login as hostname
      FROM games g
      LEFT JOIN users u ON g.hostid = u.userid
      WHERE g.status = 'finished'
      ORDER BY g.createdat DESC 
      LIMIT 20
    `);

    res.json({
      games: result.rows
    });
  } catch (error) {
    console.error('Error fetching game history:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä
router.get('/stats', async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    
    if (!token) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret-key-change-in-production');

    const statsResult = await query(`
      SELECT 
        COUNT(*) as total_games,
        COUNT(CASE WHEN g.status = 'finished' THEN 1 END) as completed_games,
        COUNT(CASE WHEN g.status = 'waiting' THEN 1 END) as waiting_games,
        COUNT(CASE WHEN g.status = 'playing' THEN 1 END) as active_games
      FROM games g
      WHERE g.hostid = $1
    `, [decoded.userId]);

    res.json({
      stats: statsResult.rows[0] || { 
        total_games: 0, 
        completed_games: 0, 
        waiting_games: 0, 
        active_games: 0 
      }
    });
  } catch (error) {
    console.error('Error fetching game stats:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢
router.get('/:roomId', async (req, res) => {
  try {
    const { roomId } = req.params;
    console.log('üîÑ Fetching room data for:', roomId);
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É
    const roomResult = await query(`
      SELECT g.*, u.login as hostname 
      FROM games g 
      LEFT JOIN users u ON g.hostid = u.userid 
      WHERE g.gameid = $1
    `, [roomId]);

    if (roomResult.rows.length === 0) {
      console.log('‚ùå Room not found:', roomId);
      return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
    const playersResult = await query(`
      SELECT gp.*, u.login, u.points 
      FROM game_players gp 
      LEFT JOIN users u ON gp.userid = u.userid 
      WHERE gp.gameid = $1 
      ORDER BY gp.playerorder
    `, [roomId]);

    console.log('‚úÖ Room data fetched successfully');
    res.json({
      room: roomResult.rows[0],
      players: playersResult.rows
    });
  } catch (error) {
    console.error('‚ùå Error fetching room:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç—ã' });
  }
});

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢
router.post('/:roomId/join', async (req, res) => {
  try {
    const { roomId } = req.params;
    const { password } = req.body || {};
    const token = req.headers.authorization?.split(' ')[1];
    
    if (!token) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret-key-change-in-production');
    console.log('üîÑ User joining room:', decoded.userId, 'to room:', roomId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    const roomResult = await query(`
      SELECT * FROM games WHERE gameid = $1 AND status = 'waiting'
    `, [roomId]);

    if (roomResult.rows.length === 0) {
      console.log('‚ùå Room not found or not waiting:', roomId);
      return res.status(404).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å' });
    }

    const room = roomResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
    if (room.isprivate) {
      if (!password) {
        return res.status(403).json({ error: '–î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å' });
      }
      if (room.roompassword !== password) {
        return res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã' });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingPlayer = await query(`
      SELECT * FROM game_players WHERE gameid = $1 AND userid = $2
    `, [roomId, decoded.userId]);

    if (existingPlayer.rows.length > 0) {
      return res.status(400).json({ error: '–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    if (room.currentplayers >= room.maxplayers) {
      return res.status(400).json({ error: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–≥—Ä–æ–∫–∞
    const playerOrder = room.currentplayers + 1;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    await query(`
      INSERT INTO game_players (gameid, userid, playerorder, ishost, score, ready)
      VALUES ($1, $2, $3, $4, $5, $6)
    `, [roomId, decoded.userId, playerOrder, false, 0, false]);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
    await query(`
      UPDATE games SET currentplayers = currentplayers + 1 WHERE gameid = $1
    `, [roomId]);

    console.log('‚úÖ User joined room successfully');
    res.json({
      success: true,
      message: '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ'
    });
  } catch (error) {
    console.error('‚ùå Error joining room:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ' });
  }
});

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢
router.post('/:roomId/ready', async (req, res) => {
  try {
    const { roomId } = req.params;
    const token = req.headers.authorization?.split(' ')[1];
    
    if (!token) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret-key-change-in-production');
    console.log('üîÑ Toggling ready status for user:', decoded.userId, 'in room:', roomId);

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    const result = await query(`
      UPDATE game_players 
      SET ready = NOT ready 
      WHERE gameid = $1 AND userid = $2 
      RETURNING *
    `, [roomId, decoded.userId]);

    if (result.rows.length === 0) {
      console.log('‚ùå Player not found in room');
      return res.status(404).json({ error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ' });
    }

    console.log('‚úÖ Ready status toggled');
    res.json({ success: true, ready: result.rows[0].ready });
  } catch (error) {
    console.error('‚ùå Error updating ready status:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞' });
  }
});

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢
router.post('/:roomId/start', async (req, res) => {
  try {
    const { roomId } = req.params;
    const token = req.headers.authorization?.split(' ')[1];
    
    if (!token) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret-key-change-in-production');
    console.log('üîÑ Starting game for room:', roomId, 'by user:', decoded.userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ö–æ—Å—Ç
    const hostCheck = await query(`
      SELECT ishost FROM game_players 
      WHERE gameid = $1 AND userid = $2 AND ishost = true
    `, [roomId, decoded.userId]);

    if (hostCheck.rows.length === 0) {
      console.log('‚ùå User is not host');
      return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã
    const playersResult = await query(`
      SELECT COUNT(*) as total, 
             COUNT(CASE WHEN ready = true THEN 1 END) as ready_count 
      FROM game_players 
      WHERE gameid = $1
    `, [roomId]);

    const { total, ready_count } = playersResult.rows[0];

    if (ready_count < total) {
      return res.status(400).json({ 
        error: '–ù–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã', 
        ready: ready_count, 
        total: total 
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
    await query(`
      UPDATE games 
      SET status = 'playing', currentround = 1 
      WHERE gameid = $1
    `, [roomId]);

    console.log('‚úÖ Game started successfully');
    res.json({ success: true, message: '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å' });
  } catch (error) {
    console.error('‚ùå Error starting game:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã' });
  }
});

module.exports = router;