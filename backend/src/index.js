const express = require('express');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// –ü—Ä–æ—Å—Ç–∞—è CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.use(cors());
app.use(express.json());

// –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–æ—É—Ç—ã
app.get('/api/test-db', (req, res) => {
  res.json({ 
    message: 'Database connection successful! (mock)',
    time: new Date().toISOString()
  });
});

app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK',
    message: 'URKA Phone Backend API is running',
    timestamp: new Date().toISOString()
  });
});

// –ú–æ–∫-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post('/api/auth/register', (req, res) => {
  const { username, email, password } = req.body;
  
  // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  if (!username || !email || !password) {
    return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }
  
  if (password.length < 6) {
    return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤' });
  }
  
  // –ú–æ–∫-–æ—Ç–≤–µ—Ç
  res.json({ 
    message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!',
    user: { 
      id: Math.floor(Math.random() * 1000), 
      username,
      email 
    },
    token: 'mock-jwt-token-' + Date.now()
  });
});

app.post('/api/auth/login', (req, res) => {
  const { username, password } = req.body;
  
  if (!username || !password) {
    return res.status(400).json({ error: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' });
  }
  
  // –ú–æ–∫-–æ—Ç–≤–µ—Ç (–≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω—ã–π)
  res.json({ 
    message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!',
    user: { 
      id: 1, 
      username,
      email: username + '@example.com'
    },
    token: 'mock-jwt-token-' + Date.now()
  });
});

// –ú–æ–∫-–∏–≥—Ä—ã
app.post('/api/game/create', (req, res) => {
  res.json({ 
    gameId: 'game-' + Date.now(),
    players: [req.body.host],
    status: 'waiting'
  });
});

app.get('/api/game/active-rooms', (req, res) => {
  res.json([
    { id: 'room-1', name: '–ö–æ–º–Ω–∞—Ç–∞ –ê–ª–µ–∫—Å–µ—è', players: 2, maxPlayers: 4 },
    { id: 'room-2', name: '–ò–≥—Ä–∞ —Å –¥—Ä—É–∑—å—è–º–∏', players: 3, maxPlayers: 6 }
  ]);
});

// Start server
app.listen(PORT, () => {
  console.log(`üöÄ Server is running on port ${PORT}`);
  console.log(`üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ: http://localhost:${PORT}/api`);
  console.log(`‚úÖ Health check: http://localhost:${PORT}/api/health`);
});