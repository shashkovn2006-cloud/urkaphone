import React, { useState, useEffect, useCallback } from "react";
import "./GuessingPage.css";
import { useAuth } from '../context/AuthContext';

export default function GuessingPage({ onBack, drawings = [], players = [], roomCode, onSubmitGuess, onComplete }) {
  const { user } = useAuth();
  const [currentGuess, setCurrentGuess] = useState("");
  const [submitted, setSubmitted] = useState(false);
  const [timeLeft, setTimeLeft] = useState(45);
  const [currentDrawingIndex, setCurrentDrawingIndex] = useState(0);
  const [showHint, setShowHint] = useState(false);
  const [currentDrawing, setCurrentDrawing] = useState(null);
  const [allPlayersSubmitted, setAllPlayersSubmitted] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∏–≥—Ä–æ–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–≥–∞–¥–∫–∏
  const checkAllPlayersSubmitted = useCallback(() => {
    const submittedCount = players.filter(player => 
      player.userid === user?.userid ? submitted : player.status === 'submitted'
    ).length;
    
    return submittedCount === players.length;
  }, [players, submitted, user]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∏—Å—É–Ω–æ–∫
  useEffect(() => {
    if (drawings.length > 0 && currentDrawingIndex < drawings.length) {
      setCurrentDrawing(drawings[currentDrawingIndex]);
      setCurrentGuess("");
      setSubmitted(false);
      setShowHint(false);
      setTimeLeft(45);
      setAllPlayersSubmitted(false);
    }
  }, [currentDrawingIndex, drawings]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  useEffect(() => {
    if (players.length > 0 && currentDrawing) {
      const allSubmitted = checkAllPlayersSubmitted();
      setAllPlayersSubmitted(allSubmitted);
      
      // –ï—Å–ª–∏ –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∏—Å—É–Ω–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      if (allSubmitted && currentDrawingIndex < drawings.length - 1) {
        const timer = setTimeout(() => {
          setCurrentDrawingIndex(prev => prev + 1);
        }, 2000);
        return () => clearTimeout(timer);
      }
      // –ï—Å–ª–∏ –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∏—Å—É–Ω–æ–∫ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
      else if (allSubmitted && currentDrawingIndex === drawings.length - 1) {
        const timer = setTimeout(() => {
          if (onComplete) {
            onComplete();
          }
        }, 2000);
        return () => clearTimeout(timer);
      }
    }
  }, [players, submitted, currentDrawing, currentDrawingIndex, drawings.length, checkAllPlayersSubmitted, onComplete]);

  // –¢–∞–π–º–µ—Ä
  useEffect(() => {
    if (timeLeft > 0 && currentDrawing && !allPlayersSubmitted) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } 
    // –í—Ä–µ–º—è –≤—ã—à–ª–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∏—Å—É–Ω–∫—É –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    else if (timeLeft === 0 && currentDrawing && !allPlayersSubmitted) {
      if (currentDrawingIndex < drawings.length - 1) {
        setTimeout(() => {
          setCurrentDrawingIndex(prev => prev + 1);
        }, 1000);
      } else {
        setTimeout(() => {
          if (onComplete) {
            onComplete();
          }
        }, 1000);
      }
    }
  }, [timeLeft, currentDrawing, allPlayersSubmitted, currentDrawingIndex, drawings.length, onComplete]);

  const handleSubmit = useCallback(() => {
    if (currentGuess.trim() && currentDrawing) {
      setSubmitted(true);
      if (onSubmitGuess) {
        onSubmitGuess(currentGuess.trim(), currentDrawingIndex);
      }
    } else {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–≥–∞–¥–∫—É!");
    }
  }, [currentGuess, currentDrawing, onSubmitGuess, currentDrawingIndex]);

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSubmit();
    }
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  };

  const getPlayerStatus = (player) => {
    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (player.userid === user?.userid) {
      return submitted ? "submitted" : "guessing";
    }
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –ø—Ä–æ–ø—Å–æ–≤
    return player.status || "guessing";
  };

  const nextDrawing = () => {
    if (currentDrawingIndex < drawings.length - 1) {
      setCurrentDrawingIndex(prev => prev + 1);
    } else {
      if (onComplete) {
        onComplete();
      }
    }
  };

  const quickGuesses = ["–ö–æ—Ç", "–°–æ–±–∞–∫–∞", "–î–æ–º", "–ú–∞—à–∏–Ω–∞", "–î–µ—Ä–µ–≤–æ", "–°–æ–ª–Ω—Ü–µ", "–ß–µ–ª–æ–≤–µ–∫", "–ü—Ç–∏—Ü–∞"];

  if (!currentDrawing || drawings.length === 0) {
    return (
      <div className="guess-container">
        <div className="guess-loading-message">
          –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∏—Å—É–Ω–∫–æ–≤...
        </div>
      </div>
    );
  }

  // –°–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
  const getStatusMessage = () => {
    if (allPlayersSubmitted) {
      if (currentDrawingIndex < drawings.length - 1) {
        return "üéâ –í—Å–µ –∏–≥—Ä–æ–∫–∏ —É–≥–∞–¥–∞–ª–∏! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∏—Å—É–Ω–∫—É...";
      } else {
        return "üéâ –í—Å–µ —Ä–∏—Å—É–Ω–∫–∏ —É–≥–∞–¥–∞–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º...";
      }
    }
    
    if (timeLeft === 0) {
      if (currentDrawingIndex < drawings.length - 1) {
        return "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∏—Å—É–Ω–∫—É...";
      } else {
        return "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º...";
      }
    }
    
    return null;
  };

  const statusMessage = getStatusMessage();

  return (
    <div className="guess-container">
      {/* –®–∞–ø–∫–∞ */}
      <header className="guess-header">
        <button className="guess-back-button" onClick={onBack}>
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <div className="guess-title">
          <h1>üéØ –í—Ä–µ–º—è —É–≥–∞–¥—ã–≤–∞—Ç—å!</h1>
          <div className="guess-room-info">
            –ö–æ–º–Ω–∞—Ç–∞: {roomCode} | –†–∏—Å—É–Ω–æ–∫ {currentDrawingIndex + 1} –∏–∑ {drawings.length}
          </div>
        </div>
        <div className="guess-timer-section">
          <div className={`guess-timer ${timeLeft <= 10 ? 'urgent' : ''}`}>
            ‚è∞ {formatTime(timeLeft)}
          </div>
        </div>
      </header>

      {/* –°—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
      {statusMessage && (
        <div className="guess-status-message">
          {statusMessage}
        </div>
      )}

      <div className="guess-content">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <div className="guess-control-panel">
          {/* –ë–ª–æ–∫ –≤–≤–æ–¥–∞ –¥–æ–≥–∞–¥–∫–∏ */}
          <div className="guess-input-card">
            <h3>üí≠ –í–∞—à–∞ –¥–æ–≥–∞–¥–∫–∞</h3>
            <div className="guess-input-wrapper">
              <input
                type="text"
                value={currentGuess}
                onChange={(e) => setCurrentGuess(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ?"
                maxLength={50}
                disabled={submitted || allPlayersSubmitted || timeLeft === 0}
                className="guess-input"
              />
              <div className="guess-char-counter">
                {currentGuess.length}/50 —Å–∏–º–≤–æ–ª–æ–≤
              </div>
            </div>
            
            {!submitted && !allPlayersSubmitted && timeLeft > 0 ? (
              <button
                onClick={handleSubmit}
                disabled={!currentGuess.trim()}
                className={`guess-send-button ${currentGuess.trim() ? 'active' : ''}`}
              >
                üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–≥–∞–¥–∫—É
              </button>
            ) : (
              <div className="guess-success-card">
                <div className="guess-success-icon">
                  {submitted ? '‚úÖ' : '‚è∞'}
                </div>
                <div className="guess-success-content">
                  <h4>
                    {submitted ? '–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!' : 
                     timeLeft === 0 ? '–í—Ä–µ–º—è –≤—ã—à–ª–æ!' : '–û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...'}
                  </h4>
                  <p>{submitted ? `¬´${currentGuess}¬ª` : '–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞'}</p>
                </div>
              </div>
            )}
          </div>

          {/* –ë–ª–æ–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏ */}
          <div className="guess-hint-card">
            <h4>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</h4>
            <button 
              className={`guess-hint-button ${showHint ? 'active' : ''}`}
              onClick={() => setShowHint(!showHint)}
              disabled={submitted || allPlayersSubmitted || timeLeft === 0}
            >
              {showHint ? 'üëÅÔ∏è –°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É' : 'üîç –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É'}
            </button>
            {showHint && currentDrawing.word && (
              <div className="guess-hint-content">
                –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞: <span className="guess-hint-letter">{currentDrawing.word.charAt(0)}</span>
              </div>
            )}
          </div>

          {/* –ë—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã */}
          <div className="guess-quick-card">
            <h4>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã</h4>
            <div className="guess-quick-grid">
              {quickGuesses.map((word, index) => (
                <button
                  key={index}
                  className="guess-quick-item"
                  onClick={() => setCurrentGuess(word)}
                  disabled={submitted || allPlayersSubmitted || timeLeft === 0}
                >
                  {word}
                </button>
              ))}
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) */}
          {process.env.NODE_ENV === 'development' && (
            <div className="guess-next-card">
              <button className="guess-next-button" onClick={nextDrawing}>
                ‚è≠Ô∏è –¢–µ—Å—Ç: –°–ª–µ–¥—É—é—â–∏–π —Ä–∏—Å—É–Ω–æ–∫
              </button>
              <button className="guess-next-button" onClick={onComplete}>
                üèÜ –¢–µ—Å—Ç: –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
              </button>
            </div>
          )}
        </div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - —Ä–∏—Å—É–Ω–æ–∫ */}
        <div className="guess-main-panel">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—É–¥–æ–∂–Ω–∏–∫–µ */}
          <div className="guess-artist-info">
            <div className="guess-artist-badge">
              <div className="guess-artist-avatar">üé®</div>
              <div className="guess-artist-text">
                <div className="guess-artist-name">–ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ö—É–¥–æ–∂–Ω–∏–∫</div>
                <div className="guess-artist-desc">–ü–æ–ø—Ä–æ–±–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∑–∏—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ...</div>
              </div>
            </div>
          </div>

          {/* –û–±–ª–∞—Å—Ç—å —Ä–∏—Å—É–Ω–∫–∞ */}
          <div className="guess-drawing-space">
            <div className="guess-drawing-frame">
              <img 
                src={currentDrawing.image || currentDrawing.dataURL} 
                alt="–†–∏—Å—É–Ω–æ–∫ –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è"
                className="guess-drawing-img"
                onError={(e) => {
                  console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", currentDrawing);
                  e.target.style.display = 'none';
                }}
              />
            </div>
          </div>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—Ä–µ–º–µ–Ω–∏ */}
          <div className="guess-time-progress">
            <div className="guess-time-text">
              –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: <span className="guess-time-value">{formatTime(timeLeft)}</span>
            </div>
            <div className="guess-progress-bar">
              <div 
                className="guess-progress-fill" 
                style={{ width: `${((45 - timeLeft) / 45) * 100}%` }}
              />
            </div>
          </div>

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–æ–≤ */}
          <div className="guess-players-progress">
            <div className="guess-progress-text">
              –ò–≥—Ä–æ–∫–æ–≤ —É–≥–∞–¥–∞–ª–∏: {players.filter(p => getPlayerStatus(p) === 'submitted').length} –∏–∑ {players.length}
            </div>
            <div className="guess-progress-bar">
              <div 
                className="guess-progress-fill players" 
                style={{ 
                  width: `${(players.filter(p => getPlayerStatus(p) === 'submitted').length / Math.max(players.length, 1)) * 100}%` 
                }}
              />
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–≥—Ä–æ–∫–∏ */}
        <div className="guess-players-panel">
          <h3>üë• –ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω</h3>
          
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —É–≥–∞–¥—ã–≤–∞–Ω–∏—è */}
          <div className="guess-stats-card">
            <div className="guess-stats-header">
              <span>–ü—Ä–æ–≥—Ä–µ—Å—Å —É–≥–∞–¥—ã–≤–∞–Ω–∏—è</span>
              <span className="guess-stats-count">
                {players.filter(p => getPlayerStatus(p) === 'submitted').length}/{players.length}
              </span>
            </div>
            <div className="guess-stats-progress">
              <div 
                className="guess-stats-fill" 
                style={{ 
                  width: `${(players.filter(p => getPlayerStatus(p) === 'submitted').length / Math.max(players.length, 1)) * 100}%` 
                }}
              />
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */}
          <div className="guess-players-list">
            {players.map((player) => (
              <div key={player.userid} className={`guess-player-card ${getPlayerStatus(player)}`}>
                <div className="guess-player-avatar">
                  {player.login?.charAt(0).toUpperCase() || '?'}
                </div>
                <div className="guess-player-info">
                  <div className="guess-player-name">
                    {player.login}
                    {player.userid === user?.userid && <span className="guess-you-label">(–í—ã)</span>}
                  </div>
                  <div className="guess-player-status">
                    {getPlayerStatus(player) === 'submitted' ? (
                      <span className="guess-status-done">‚úÖ –£–≥–∞–¥–∞–ª</span>
                    ) : (
                      <span className="guess-status-thinking">ü§î –î—É–º–∞–µ—Ç...</span>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—É–Ω–¥–∞ */}
          <div className="guess-round-stats">
            <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—É–Ω–¥–∞</h4>
            <div className="guess-stats-grid">
              <div className="guess-stat-box">
                <div className="guess-stat-number">{currentDrawingIndex + 1}</div>
                <div className="guess-stat-label">–¢–µ–∫—É—â–∏–π</div>
              </div>
              <div className="guess-stat-box">
                <div className="guess-stat-number">{drawings.length}</div>
                <div className="guess-stat-label">–í—Å–µ–≥–æ</div>
              </div>
              <div className="guess-stat-box">
                <div className="guess-stat-number">{timeLeft}</div>
                <div className="guess-stat-label">–°–µ–∫—É–Ω–¥</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}