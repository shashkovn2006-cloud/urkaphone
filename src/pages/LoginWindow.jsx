import React, { useState } from "react";
import "./LoginWindow.css";
import myImage from "../assets/imagregavt.png";

export default function LoginWindow({ onSwitchToRegister, onLoginSuccess, onHomeClick, onLogin }) {
  const [formData, setFormData] = useState({
    username: "",
    password: ""
  });
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ""
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.username.trim()) {
      newErrors.username = "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
    }

    if (!formData.password) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setIsLoading(true);
    
    try {
      // –ú–û–ö-–í–•–û–î (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è Vercel)
      console.log('üîê Mock login for:', formData.username);
      
      await new Promise((resolve, reject) => {
        setTimeout(() => {
          try {
            // –í—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –¥–µ–º–æ
            const mockUser = {
              id: Math.floor(Math.random() * 1000),
              username: formData.username,
              token: 'mock-jwt-token-' + Date.now()
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            localStorage.setItem('token', mockUser.token);
            localStorage.setItem('user', JSON.stringify(mockUser));
            
            console.log('‚úÖ Mock login successful');
            resolve(mockUser);
          } catch (err) {
            reject(new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'));
          }
        }, 1500);
      });

      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ —É—Å–ø–µ—Ö–∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
      if (onLoginSuccess) {
        onLoginSuccess();
      }

      // –¢–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ–º onLogin –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      if (onLogin) {
        await onLogin({
          login: formData.username,
          password: formData.password
        });
      }

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData({
        username: "",
        password: ""
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
      alert('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Urka Phone!');

    } catch (error) {
      setErrors({ submit: error.message || "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="login-container">
      {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–º–æ–π –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */}
      <button 
        className="home-button"
        onClick={onHomeClick}
        disabled={isLoading}
        title="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
      >
        ‚Üê –î–æ–º–æ–π
      </button>

      <div className="login-info">
        <h1>Urka Phone</h1>
        <p>–†–∏—Å—É–π—Ç–µ, —É–≥–∞–¥—ã–≤–∞–π—Ç–µ –∏ –≤–µ—Å–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –≤ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–≥—Ä–µ!</p>
        <img src={myImage} alt="–û–ø–∏—Å–∞–Ω–∏–µ" className="login-image" />
        <div className="features">
          <div className="feature">
            <span>üéÆ</span>
            <div>
              <h3>–í–µ—Å–µ–ª—ã–µ –∏–≥—Ä—ã</h3>
              <p>–†–∏—Å—É–π –∏ —É–≥–∞–¥—ã–≤–∞–π</p>
            </div>
          </div>
          <div className="feature">
            <span>üë•</span>
            <div>
              <h3>–° –¥—Ä—É–∑—å—è–º–∏</h3>
              <p>–î–æ 8 –∏–≥—Ä–æ–∫–æ–≤</p>
            </div>
          </div>
        </div>
      </div>

      <form className="login-form" onSubmit={handleSubmit}>
        <h2>–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É</h2>
        <p>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞</p>
        
        <label>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
        <input 
          type="text" 
          name="username"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" 
          value={formData.username}
          onChange={handleInputChange}
          className={errors.username ? "error" : ""}
          disabled={isLoading}
        />
        {errors.username && <span className="error-text">{errors.username}</span>}
        
        <label>–ü–∞—Ä–æ–ª—å</label>
        <input 
          type="password" 
          name="password"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" 
          value={formData.password}
          onChange={handleInputChange}
          className={errors.password ? "error" : ""}
          disabled={isLoading}
        />
        {errors.password && <span className="error-text">{errors.password}</span>}
        
        {errors.submit && <span className="error-text submit-error">{errors.submit}</span>}
        
        <button type="submit" disabled={isLoading}>
          {isLoading ? "–í—Ö–æ–¥..." : "–í–æ–π—Ç–∏"}
        </button>
        
        <p className="register-hint">
          –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
          <span 
            className="register-link" 
            onClick={isLoading ? undefined : onSwitchToRegister}
            style={{ cursor: isLoading ? 'not-allowed' : 'pointer' }}
          >
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å
          </span>
        </p>
      </form>
    </div>
  );
}