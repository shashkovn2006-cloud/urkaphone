import React, { useState, useEffect } from "react";
import "./ResultsPage.css";
import { useAuth } from '../context/AuthContext';

export default function ResultsPage({ onBack, gameResults, players = [], roomCode, onPlayAgain }) {
  const { user } = useAuth();
  const [selectedRound, setSelectedRound] = useState(0);
  const [expandedDrawings, setExpandedDrawings] = useState({});

  // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  if (!gameResults || !gameResults.rounds || gameResults.rounds.length === 0) {
    return (
      <div className="results-container">
        <header className="results-header">
          <button className="back-button" onClick={onBack}>
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          <div className="results-title">
            <h1>üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã</h1>
            <div className="room-info">–ö–æ–º–Ω–∞—Ç–∞: {roomCode}</div>
          </div>
          <div className="results-actions">
            <button className="play-again-btn" onClick={onPlayAgain}>
              üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞
            </button>
          </div>
        </header>
        
        <div className="no-results">
          <div className="no-results-icon">üìä</div>
          <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</h2>
          <p>–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</p>
        </div>
      </div>
    );
  }

  const rounds = gameResults.rounds;
  const currentRound = rounds[selectedRound];

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
  const getPlayerStats = (playerId) => {
    let correctGuesses = 0;
    let totalGuesses = 0;
    let drawings = 0;

    rounds.forEach(round => {
      // –°—á–∏—Ç–∞–µ–º —É–≥–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
      round.guesses?.forEach(guess => {
        if (guess.playerId === playerId && guess.isCorrect) {
          correctGuesses++;
        }
        if (guess.playerId === playerId) {
          totalGuesses++;
        }
      });

      // –°—á–∏—Ç–∞–µ–º —Ä–∏—Å—É–Ω–∫–∏
      if (round.drawing?.playerId === playerId) {
        drawings++;
      }
    });

    return {
      correctGuesses,
      totalGuesses,
      drawings,
      accuracy: totalGuesses > 0 ? Math.round((correctGuesses / totalGuesses) * 100) : 0
    };
  };

  // –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
  const topPlayers = players.map(player => {
    const stats = getPlayerStats(player.userid);
    return {
      ...player,
      stats,
      score: stats.correctGuesses * 10 + stats.drawings * 5
    };
  }).sort((a, b) => b.score - a.score);

  const toggleDrawingExpand = (drawingId) => {
    setExpandedDrawings(prev => ({
      ...prev,
      [drawingId]: !prev[drawingId]
    }));
  };

  return (
    <div className="results-container">
      {/* –®–∞–ø–∫–∞ */}
      <header className="results-header">
        <button className="back-button" onClick={onBack}>
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <div className="results-title">
          <h1>üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã</h1>
          <div className="room-info">
            –ö–æ–º–Ω–∞—Ç–∞: {roomCode} | –ò–≥—Ä–æ–∫–æ–≤: {players.length} | –†–∞—É–Ω–¥–æ–≤: {rounds.length}
          </div>
        </div>
        <div className="results-actions">
          <button className="play-again-btn" onClick={onPlayAgain}>
            üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞
          </button>
        </div>
      </header>

      <div className="results-content">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø–æ–¥–∏—É–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="results-sidebar">
          {/* –ü–æ–¥–∏—É–º */}
          <div className="podium-card">
            <h3>üèÖ –ü–æ–¥–∏—É–º</h3>
            <div className="podium">
              {topPlayers.slice(0, 3).map((player, index) => (
                <div key={player.userid} className={`podium-place place-${index + 1}`}>
                  <div className="podium-rank">{index + 1}</div>
                  <div className="podium-avatar">
                    {player.login?.charAt(0).toUpperCase() || '?'}
                  </div>
                  <div className="podium-info">
                    <div className="podium-name">
                      {player.login}
                      {player.userid === user?.userid && <span className="you-badge">(–í—ã)</span>}
                    </div>
                    <div className="podium-score">{player.score} –æ—á–∫–æ–≤</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ */}
          <div className="stats-card">
            <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div className="players-stats">
              {topPlayers.map((player, index) => (
                <div key={player.userid} className="player-stat">
                  <div className="stat-rank">#{index + 1}</div>
                  <div className="stat-avatar">
                    {player.login?.charAt(0).toUpperCase() || '?'}
                  </div>
                  <div className="stat-info">
                    <div className="stat-name">
                      {player.login}
                      {player.userid === user?.userid && <span className="you-badge">(–í—ã)</span>}
                    </div>
                    <div className="stat-details">
                      {player.stats.correctGuesses} ‚úì ‚Ä¢ {player.stats.accuracy}% —Ç–æ—á–Ω–æ—Å—Ç—å
                    </div>
                  </div>
                  <div className="stat-score">{player.score}</div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–æ–≤ */}
        <div className="results-main">
          {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–æ–≤ */}
          <div className="rounds-navigation">
            <h3>üìã –†–∞—É–Ω–¥—ã</h3>
            <div className="rounds-tabs">
              {rounds.map((round, index) => (
                <button
                  key={index}
                  className={`round-tab ${selectedRound === index ? 'active' : ''}`}
                  onClick={() => setSelectedRound(index)}
                >
                  –†–∞—É–Ω–¥ {index + 1}
                </button>
              ))}
            </div>
          </div>

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞—É–Ω–¥–∞ */}
          <div className="round-results">
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—É–Ω–¥–µ */}
            <div className="round-header">
              <h2>–†–∞—É–Ω–¥ {selectedRound + 1}</h2>
              <div className="round-artist">
                –•—É–¥–æ–∂–Ω–∏–∫: <span className="artist-name">
                  {players.find(p => p.userid === currentRound.drawing?.playerId)?.login || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                </span>
              </div>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∏—Å—É–Ω–æ–∫ —Ä–∞—É–Ω–¥–∞ */}
            {currentRound.drawing && (
              <div className="main-drawing-card">
                <div className="drawing-header">
                  <div className="drawing-title">
                    <span className="word-badge">–°–ª–æ–≤–æ: {currentRound.drawing.word}</span>
                  </div>
                  <button 
                    className="expand-btn"
                    onClick={() => toggleDrawingExpand(`main-${selectedRound}`)}
                  >
                    {expandedDrawings[`main-${selectedRound}`] ? 'üìè –°–≤–µ—Ä–Ω—É—Ç—å' : 'üìè –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'}
                  </button>
                </div>
                
                <div className={`drawing-container ${expandedDrawings[`main-${selectedRound}`] ? 'expanded' : ''}`}>
                  <img 
                    src={currentRound.drawing.imageData} 
                    alt={`–†–∏—Å—É–Ω–æ–∫: ${currentRound.drawing.word}`}
                    className="drawing-image"
                  />
                </div>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–≥–∞–¥—ã–≤–∞–Ω–∏—è */}
                <div className="guessing-results">
                  <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–≥–∞–¥—ã–≤–∞–Ω–∏—è:</h4>
                  <div className="guesses-list">
                    {currentRound.guesses?.map((guess, index) => {
                      const guessPlayer = players.find(p => p.userid === guess.playerId);
                      return (
                        <div key={index} className={`guess-result ${guess.isCorrect ? 'correct' : 'incorrect'}`}>
                          <div className="guess-player">
                            <span className="player-avatar-small">
                              {guessPlayer?.login?.charAt(0).toUpperCase() || '?'}
                            </span>
                            {guessPlayer?.login || '–ò–≥—Ä–æ–∫'}
                          </div>
                          <div className="guess-text">¬´{guess.guess}¬ª</div>
                          <div className="guess-status">
                            {guess.isCorrect ? '‚úÖ –í–µ—Ä–Ω–æ' : '‚ùå –ù–µ–≤–µ—Ä–Ω–æ'}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            )}

            {/* –í—Å–µ —Ä–∏—Å—É–Ω–∫–∏ —Ä–∞—É–Ω–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
            {currentRound.allDrawings && currentRound.allDrawings.length > 0 && (
              <div className="all-drawings-section">
                <h3>üé® –í—Å–µ —Ä–∏—Å—É–Ω–∫–∏ —Ä–∞—É–Ω–¥–∞</h3>
                <div className="drawings-grid">
                  {currentRound.allDrawings.map((drawing, index) => (
                    <div key={index} className="drawing-mini-card">
                      <div className="mini-drawing-header">
                        <span className="mini-artist">
                          {players.find(p => p.userid === drawing.playerId)?.login || '–ò–≥—Ä–æ–∫'}
                        </span>
                        <span className="mini-word">{drawing.word}</span>
                      </div>
                      <div className="mini-drawing-container">
                        <img 
                          src={drawing.imageData} 
                          alt={`–†–∏—Å—É–Ω–æ–∫: ${drawing.word}`}
                          className="mini-drawing-image"
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="results-footer">
        <button className="action-btn secondary" onClick={onBack}>
          üìã –ö —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç
        </button>
        <button className="action-btn primary" onClick={onPlayAgain}>
          üéÆ –ò–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑
        </button>
      </div>
    </div>
  );
}