import React, { useState, useEffect } from "react";
import "./CreateWordsPage.css";
import { useAuth } from '../context/AuthContext';

export default function CreateWordsPage({ onBack, onSubmitWords, players = [], roomCode }) {
  const { user } = useAuth();
  const [word, setWord] = useState("");
  const [submitted, setSubmitted] = useState(false);
  const [timeLeft, setTimeLeft] = useState(60); // 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–≤–æ–¥ —Å–ª–æ–≤–∞
  const [usedWords, setUsedWords] = useState(new Set());

  // –°–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
  const wordPrompts = [
    "–ö–æ—Å–º–æ–Ω–∞–≤—Ç", "–í–µ–ª–æ—Å–∏–ø–µ–¥", "–ü–∏—Ä–∞–º–∏–¥–∞", "–ë–∞–±–æ—á–∫–∞", "–¢–µ–ª–µ—Å–∫–æ–ø",
    "–°—É–ø–µ—Ä–≥–µ—Ä–æ–π", "–ü–∏–Ω–≥–≤–∏–Ω", "–†–∞–¥—É–≥–∞", "–ó–∞–º–æ–∫", "–†–æ–±–æ—Ç",
    "–î–∏–Ω–æ–∑–∞–≤—Ä", "–ö–æ—Ä–∞–±–ª—å", "–°–µ—Ä–¥—Ü–µ", "–ö–æ—Ä–æ–Ω–∞", "–î—Ä–∞–∫–æ–Ω"
  ];

  // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
  useEffect(() => {
    if (timeLeft > 0 && !submitted) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (timeLeft === 0 && !submitted) {
      handleSubmit();
    }
  }, [timeLeft, submitted]);

  const handleSubmit = () => {
    if (word.trim()) {
      setSubmitted(true);
      if (onSubmitWords) {
        onSubmitWords([word.trim()]); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º
      }
    } else {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ!");
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSubmit();
    }
  };

  const getPlayerStatus = (player) => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–≤
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    return player.userid === user?.userid && submitted ? "submitted" : "waiting";
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  };

  return (
    <div className="create-words-container">
      {/* –®–∞–ø–∫–∞ */}
      <header className="words-header">
        <button className="back-button" onClick={onBack}>
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <div className="words-title">
          <h1>üéØ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–≥—Ä—ã</h1>
          <div className="room-info">–ö–æ–º–Ω–∞—Ç–∞: {roomCode}</div>
        </div>
        <div className="timer-section">
          <div className={`timer ${timeLeft <= 10 ? 'urgent' : ''}`}>
            ‚è∞ {formatTime(timeLeft)}
          </div>
        </div>
      </header>

      <div className="words-content">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤–≤–æ–¥ —Å–ª–æ–≤–∞ */}
        <div className="words-input-panel">
          <div className="input-section">
            <h2>‚ú® –í–∞—à–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–≥—Ä—ã</h2>
            <p className="instruction">
              –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –æ–¥–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É. 
              –î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –±—É–¥—É—Ç —ç—Ç–æ —Ä–∏—Å–æ–≤–∞—Ç—å!
            </p>

            <div className="word-input-container">
              <input
                type="text"
                value={word}
                onChange={(e) => setWord(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–ª–æ–≤–æ..."
                maxLength={30}
                disabled={submitted}
                className="word-input"
              />
            </div>

            {/* –ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤ */}
            <div className="prompts-section">
              <h3>üí° –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö —Å–ª–æ–≤:</h3>
              <div className="prompts-grid">
                {wordPrompts.map((prompt, index) => (
                  <span key={index} className="prompt-tag">
                    {prompt}
                  </span>
                ))}
              </div>
            </div>

            {/* –°–æ–≤–µ—Ç—ã */}
            <div className="tips-section">
              <h3>üé® –°–æ–≤–µ—Ç—ã –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ —Å–ª–æ–≤–∞:</h3>
              <div className="tips-list">
                <div className="tip-item">‚úÖ –õ–µ–≥–∫–æ —Ä–∏—Å–æ–≤–∞—Ç—å</div>
                <div className="tip-item">‚úÖ –ü–æ–Ω—è—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö</div>
                <div className="tip-item">‚úÖ –ù–µ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ–µ</div>
                <div className="tip-item">‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ</div>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
            {!submitted && (
              <button
                onClick={handleSubmit}
                disabled={!word.trim()}
                className={`submit-words-btn ${word.trim() ? 'active' : ''}`}
              >
                üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ!
              </button>
            )}

            {submitted && (
              <div className="submitted-message">
                <div className="success-icon">‚úÖ</div>
                <div className="success-text">
                  <h3>–í–∞—à–µ —Å–ª–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</h3>
                  <p>¬´{word}¬ª</p>
                  <div className="waiting-text">–û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...</div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤ */}
        <div className="players-status-panel">
          <h2>üë• –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤</h2>
          
          <div className="players-list">
            {players.map((player) => (
              <div key={player.userid} className="player-status-item">
                <div className="player-avatar">
                  {player.login?.charAt(0).toUpperCase() || '?'}
                </div>
                <div className="player-info">
                  <div className="player-name">
                    {player.login}
                    {player.userid === user?.userid && <span className="you-badge">(–í—ã)</span>}
                  </div>
                  <div className={`status ${getPlayerStatus(player)}`}>
                    {getPlayerStatus(player) === 'submitted' ? '‚úÖ –°–ª–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '‚è≥ –ü—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ'}
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
          <div className="progress-section">
            <div className="progress-bar">
              <div 
                className="progress-fill" 
                style={{ 
                  width: `${(players.filter(p => getPlayerStatus(p) === 'submitted').length / Math.max(players.length, 1)) * 100}%` 
                }}
              ></div>
            </div>
            <div className="progress-text">
              {players.filter(p => getPlayerStatus(p) === 'submitted').length} –∏–∑ {players.length} –∏–≥—Ä–æ–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–æ–≤–∞
            </div>
          </div>

          {/* –ü—Ä–∞–≤–∏–ª–∞ */}
          <div className="rules-section">
            <h3>üìù –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h3>
            <ul>
              <li>üí¨ –ö–∞–∂–¥—ã–π –ø–∏—à–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É</li>
              <li>üé® –ü–æ—Ç–æ–º –≤—ã –±—É–¥–µ—Ç–µ —Ä–∏—Å–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤</li>
              <li>üîç –ò —É–≥–∞–¥—ã–≤–∞—Ç—å —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–ª–∏ –¥—Ä—É–≥–∏–µ</li>
              <li>‚è±Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –ø—Ä–∏–¥—É–º—ã–≤–∞–Ω–∏–µ</li>
              <li>üöÄ –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ –Ω–µ–ª—å–∑—è</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}