import React, { useState, useEffect } from 'react';
import './App.css';
import MainScreen from './pages/MainScreen';
import RegisterWindow from './pages/RegisterWindow';
import LoginWindow from './pages/LoginWindow';
import ChooseGameMode from './pages/ChooseGameMode';
import RoomPage from './pages/RoomPage';
import SettingsWindow from './pages/SettingsWindow';
import { useAuth } from './context/AuthContext';
import CreateWordsPage from './pages/CreateWordsPage';
import DrawingPage from './pages/DrawingPage';
import GuessingPage from './pages/GuessingPage';
import ResultsPage from './pages/ResultsPage';

function App() {
  const [showRegister, setShowRegister] = useState(false);
  const [showLogin, setShowLogin] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [showChooseGame, setShowChooseGame] = useState(false);
  const [showRoom, setShowRoom] = useState(false);
  const [showCreateWords, setShowCreateWords] = useState(false);
  const [showDrawing, setShowDrawing] = useState(false);
  const [showGuessing, setShowGuessing] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [roomCodeForJoin, setRoomCodeForJoin] = useState(null);
  const [isCreatingRoom, setIsCreatingRoom] = useState(false);
  const [submittedWords, setSubmittedWords] = useState([]);
  const [drawings, setDrawings] = useState([]);
  const [gameResults, setGameResults] = useState(null);
  const [roomPlayers, setRoomPlayers] = useState([]); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
  
  const { user, login, register, logout, isAuthenticated } = useAuth();
  const [userStats, setUserStats] = useState({
    games: 0,
    wins: 0,
    points: 0,
  });

  useEffect(() => {
    if (
      showRegister ||
      showLogin ||
      showSettings ||
      showChooseGame ||
      showRoom ||
      showCreateWords ||
      showDrawing ||
      showGuessing ||
      showResults
    ) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
    return () => {
      document.body.style.overflow = '';
    };
  }, [showRegister, showLogin, showSettings, showChooseGame, showRoom, showCreateWords, showDrawing, showGuessing, showResults]);

  useEffect(() => {
    if (user) {
      setUserStats({
        games: user.gamesplayed || 0,
        wins: user.gameswon || 0,
        points: user.points || 0,
      });
    }
  }, [user]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const fetchRoomPlayers = async (roomCode) => {
    try {
      const response = await fetch(`/api/rooms/${roomCode}/players`);
      if (response.ok) {
        const players = await response.json();
        setRoomPlayers(players);
        return players;
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã');
        return [];
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–≥—Ä–æ–∫–æ–≤:', error);
      return [];
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
  const fetchGameResults = async (roomCode) => {
    try {
      const response = await fetch(`/api/games/${roomCode}/results`);
      if (response.ok) {
        const results = await response.json();
        setGameResults(results);
        return results;
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã');
        return null;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      return null;
    }
  };
  
  const switchToRegister = () => {
    setShowLogin(false);
    setShowRegister(true);
  };

  const switchToLogin = () => {
    setShowRegister(false);
    setShowLogin(true);
  };

  const handleLoginSuccess = () => {
    setShowLogin(false);
    setUserStats({ games: 12, wins: 8, points: 450 });
  };

  const handleRegisterSuccess = () => {
    setShowRegister(false);
    setUserStats({ games: 0, wins: 0, points: 0 });
  };

  const handleBackFromChooseGame = () => {
    setShowChooseGame(false);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ –∫–æ–¥—É - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
  const handleJoinByCode = async (code) => {
    setRoomCodeForJoin(code);
    setIsCreatingRoom(false);
    setShowChooseGame(false);
    const players = await fetchRoomPlayers(code);
    setRoomPlayers(players);
    setShowRoom(true);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
  const handleRoomCreated = async (roomId) => {
    console.log('üéâ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ RoomPage —Å ID:', roomId);
    setRoomCodeForJoin(roomId);
    setIsCreatingRoom(true);
    setShowChooseGame(false);
    const players = await fetchRoomPlayers(roomId);
    setRoomPlayers(players);
    setShowRoom(true);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
  const handleBackFromRoom = () => {
    setShowRoom(false);
    setShowChooseGame(true);
    setRoomPlayers([]); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const handleBackFromResults = () => {
    setShowResults(false);
    setShowChooseGame(true);
    setRoomPlayers([]); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  const handlePlayAgain = () => {
    setShowResults(false);
    setShowRoom(true);
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    setDrawings([]);
    setSubmittedWords([]);
    setGameResults(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É" –≤ MainScreen
  const handleCreateRoomClick = () => {
    setShowChooseGame(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ —Å–ª–æ–≤
  const handleStartGame = (roomCode, players) => {
    console.log('üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ:', roomCode, '–ò–≥—Ä–æ–∫–∏:', players);
    setShowRoom(false);
    setShowCreateWords(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∏—Å–æ–≤–∞–Ω–∏—è
  const handleSubmitWords = (words) => {
    console.log('üìù –°–ª–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', words);
    setSubmittedWords(words);
    setShowCreateWords(false);
    setShowDrawing(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–≥–∞–¥—ã–≤–∞–Ω–∏—è
  const handleDrawingComplete = (drawingData) => {
    console.log('üé® –†–∏—Å—É–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω:', drawingData);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∏—Å—É–Ω–æ–∫
    const newDrawing = {
      id: Date.now(),
      image: drawingData,
      dataURL: drawingData,
      word: submittedWords[0] || '–°–ª–æ–≤–æ',
      artist: user?.login || '–ò–≥—Ä–æ–∫',
      playerId: user?.userid || 'unknown'
    };
    
    setDrawings(prev => [...prev, newDrawing]);
    setShowDrawing(false);
    setShowGuessing(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è
  const handleBackFromDrawing = () => {
    setShowDrawing(false);
    setShowRoom(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–≥–∞–¥—ã–≤–∞–Ω–∏—è
  const handleBackFromGuessing = () => {
    setShowGuessing(false);
    setShowRoom(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const handleGuessingComplete = async () => {
    console.log('üéØ –£–≥–∞–¥—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const results = await fetchGameResults(roomCodeForJoin);
    
    if (!results) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Å–æ–∑–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
      const mockResults = {
        roomCode: roomCodeForJoin,
        rounds: drawings.map((drawing, index) => ({
          roundNumber: index + 1,
          drawing: {
            playerId: drawing.playerId,
            word: drawing.word,
            imageData: drawing.image
          },
          guesses: [
            {
              playerId: user?.userid || 'user1',
              guess: '–ö–æ—Ç',
              isCorrect: true,
              timestamp: new Date().toISOString()
            }
          ]
        })),
        players: roomPlayers.length > 0 ? roomPlayers : [
          { userid: user?.userid || 'user1', login: user?.login || '–í—ã' }
        ]
      };
      setGameResults(mockResults);
    }
    
    setShowGuessing(false);
    setShowResults(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–≥–∞–¥–∫–∏
  const handleSubmitGuess = (guess, drawingIndex) => {
    console.log('üîç –î–æ–≥–∞–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', guess, '–¥–ª—è —Ä–∏—Å—É–Ω–∫–∞:', drawingIndex);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–≥–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  };

  // –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
  const closeAllModals = () => {
    setShowRegister(false);
    setShowLogin(false);
    setShowSettings(false);
    setShowChooseGame(false);
    setShowRoom(false);
    setShowCreateWords(false);
    setShowDrawing(false);
    setShowGuessing(false);
    setShowResults(false);
    setRoomPlayers([]); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
  };

  return (
    <div className="App" style={{ minHeight: '100vh' }}>
      {/* –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω */}
      {!showChooseGame && !showRegister && !showLogin && !showSettings && !showRoom && !showCreateWords && !showDrawing && !showGuessing && !showResults && (
        <MainScreen
          onLoginClick={() => setShowLogin(true)}
          onRegisterClick={() => setShowRegister(true)}
          onSettingsClick={() => setShowSettings(true)}
          onStartGameClick={() => setShowChooseGame(true)}
          onCreateRoomClick={handleCreateRoomClick}
          isAuthenticated={isAuthenticated}
          onLogoutClick={logout}
          userStats={userStats}
        />
      )}

      {/* –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã */}
      {showChooseGame && (
        <ChooseGameMode
          onBack={handleBackFromChooseGame}
          onJoinByCode={handleJoinByCode}
          onRoomCreated={handleRoomCreated}
          availableRooms={[]}
          onStartGame={handleStartGame}
        />
      )}

      {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤ */}
      {showCreateWords && (
        <CreateWordsPage
          onBack={() => setShowCreateWords(false)}
          onSubmitWords={handleSubmitWords}
          players={roomPlayers} // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –ë–î
          roomCode={roomCodeForJoin}
        />
      )}

      {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è */}
      {showDrawing && (
        <DrawingPage
          onBack={handleBackFromDrawing}
          onDrawingComplete={handleDrawingComplete}
          words={submittedWords}
          players={roomPlayers} // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –ë–î
          roomCode={roomCodeForJoin}
        />
      )}

      {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è */}
      {showGuessing && (
        <GuessingPage
          onBack={handleBackFromGuessing}
          onSubmitGuess={handleSubmitGuess}
          drawings={drawings}
          players={roomPlayers.length > 0 ? roomPlayers : [ // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            { userid: user?.userid || 'user1', login: user?.login || '–í—ã', status: 'submitted' }
          ]}
          roomCode={roomCodeForJoin}
          onComplete={handleGuessingComplete}
        />
      )}

      {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
      {showResults && (
        <ResultsPage
          onBack={handleBackFromResults}
          onPlayAgain={handlePlayAgain}
          gameResults={gameResults}
          players={roomPlayers.length > 0 ? roomPlayers : [ // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            { userid: user?.userid || 'user1', login: user?.login || '–í—ã' }
          ]}
          roomCode={roomCodeForJoin}
        />
      )}

      {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–º–Ω–∞—Ç—ã */}
      {showRoom && (
        <RoomPage
          roomCode={roomCodeForJoin}
          isCreating={isCreatingRoom}
          onBack={handleBackFromRoom}
          onStartGame={handleStartGame}
          players={roomPlayers} // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç—É
        />
      )}

      {/* –û–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
      {showRegister && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 1000,
            backgroundColor: 'rgba(0,0,0,0.5)'
          }}
        >
          <RegisterWindow
            onSwitchToLogin={switchToLogin}
            onRegisterSuccess={handleRegisterSuccess}
            onHomeClick={closeAllModals}
            onRegister={register}
          />
        </div>
      )}

      {/* –û–∫–Ω–æ –≤—Ö–æ–¥–∞ */}
      {showLogin && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 1000,
            backgroundColor: 'rgba(0,0,0,0.5)'
          }}
        >
          <LoginWindow
            onSwitchToRegister={switchToRegister}
            onLoginSuccess={handleLoginSuccess}
            onHomeClick={closeAllModals}
            onLogin={login}
          />
        </div>
      )}

      {/* –û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      {showSettings && (
        <SettingsWindow onClose={() => setShowSettings(false)} />
      )}
    </div>
  );
}

export default App;