// –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–∫-–≤–µ—Ä—Å–∏—è API –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ Vercel
const mockApi = {
  register: (userData) => {
    console.log('üìù Mock register:', userData);
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        if (!userData.username || !userData.email || !userData.password) {
          reject(new Error('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'));
          return;
        }
        
        if (userData.password.length < 6) {
          reject(new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'));
          return;
        }
        
        resolve({ 
          data: { 
            message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!',
            token: 'mock-jwt-token-' + Date.now(),
            user: { 
              id: Math.floor(Math.random() * 1000), 
              username: userData.username,
              email: userData.email
            }
          } 
        });
      }, 1500);
    });
  },
  
  login: (userData) => {
    console.log('üîê Mock login:', userData);
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        // –î–µ–º–æ-–ª–æ–≥–∏–Ω: –ª—é–±–æ–π –ø–∞—Ä–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç
        if (!userData.username || !userData.password) {
          reject(new Error('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å'));
          return;
        }
        
        resolve({ 
          data: { 
            message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!',
            token: 'mock-jwt-token-' + Date.now(),
            user: { 
              id: 1, 
              username: userData.username,
              email: userData.username + '@example.com'
            }
          } 
        });
      }, 1500);
    });
  },
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–≥—Ä—ã
  createGame: (gameData) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({ 
          data: { 
            gameId: 'game-' + Date.now(),
            players: [gameData.host],
            status: 'waiting'
          } 
        });
      }, 1000);
    });
  },
  
  getActiveRooms: () => {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({ 
          data: [
            { id: 'room-1', name: '–ö–æ–º–Ω–∞—Ç–∞ –ê–ª–µ–∫—Å–µ—è', players: 2, maxPlayers: 4 },
            { id: 'room-2', name: '–ò–≥—Ä–∞ —Å –¥—Ä—É–∑—å—è–º–∏', players: 3, maxPlayers: 6 }
          ] 
        });
      }, 500);
    });
  }
};

export default mockApi;