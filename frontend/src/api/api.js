// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL API
const getApiBaseUrl = () => {
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Render –±—ç–∫–µ–Ω–¥, –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - localhost
  if (process.env.NODE_ENV === 'production') {
    return process.env.REACT_APP_API_URL || 'https://urkaphone-backend.onrender.com/api';
  }
  return 'http://localhost:5000/api';
};

const API_BASE_URL = getApiBaseUrl();

const apiRequest = async (endpoint, options = {}) => {
  const token = localStorage.getItem('token');
  
  const config = {
    method: options.method || 'GET',
    headers: {
      'Content-Type': 'application/json',
      ...(token && { 'Authorization': `Bearer ${token}` }),
    },
  };

  if (options.body) {
    config.body = JSON.stringify(options.body);
  }

  try {
    console.log(`üîÑ API Request: ${config.method} ${API_BASE_URL}${endpoint}`);
    
    const response = await fetch(`${API_BASE_URL}${endpoint}`, config);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå HTTP Error:', response.status, errorText);
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const contentType = response.headers.get('content-type');
    
    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
    if (!contentType || !contentType.includes('application/json')) {
      console.log('üì® Response is not JSON, returning empty object');
      return { data: {} };
    }
    
    const text = await response.text();
    console.log('üì® API Response:', text);
    
    if (!text) {
      return { data: {} };
    }
    
    const data = JSON.parse(text);
    return { data };
    
  } catch (error) {
    console.error('‚ùå API Error:', error);
    
    // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if (error.message.includes('Failed to fetch')) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω.');
    }
    
    throw new Error(error.message || '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
  }
};

// API —Ñ—É–Ω–∫—Ü–∏–∏
export const authAPI = {
  register: (userData) => apiRequest('/auth/register', {
    method: 'POST',
    body: userData,
  }),
  
  login: (userData) => apiRequest('/auth/login', {
    method: 'POST',
    body: userData,
  }),
};

export const gameAPI = {
  createGame: (gameData) => apiRequest('/game/create', {
    method: 'POST',
    body: gameData,
  }),
  
  getHistory: () => apiRequest('/game/history'),
  
  getActiveRooms: () => apiRequest('/game/active-rooms'),
  
  getStats: () => apiRequest('/game/stats'),
  
  testConnection: () => apiRequest('/test-db'),
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const testConnection = () => apiRequest('/test-db');

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { API_BASE_URL, getApiBaseUrl };

export default apiRequest;