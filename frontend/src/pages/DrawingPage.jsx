import React, { useState, useEffect, useRef, useCallback } from "react";
import "./DrawingPage.css";
import { useAuth } from '../context/AuthContext';

export default function DrawingPage({ onBack, words = [], players = [], roomCode, onDrawingComplete }) {
  const { user } = useAuth();
  const canvasRef = useRef(null);
  const [currentWord, setCurrentWord] = useState("");
  const [isDrawing, setIsDrawing] = useState(false);
  const [color, setColor] = useState("#000000");
  const [brushSize, setBrushSize] = useState(5);
  const [timeLeft, setTimeLeft] = useState(60); // 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
  const [showWord, setShowWord] = useState(true);
  const [currentRound] = useState(1); // –£–±—Ä–∞–ª setCurrentRound —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  const [totalRounds] = useState(3); // –£–±—Ä–∞–ª setTotalRounds —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);

  // –¶–≤–µ—Ç–∞ –¥–ª—è –ø–∞–ª–∏—Ç—Ä—ã
  const colors = [
    "#000000", "#FF0000", "#00FF00", "#0000FF", "#FFFF00",
    "#FF00FF", "#00FFFF", "#FFA500", "#800080", "#FFC0CB",
    "#A52A2A", "#808080", "#FFFFFF"
  ];

  // –†–∞–∑–º–µ—Ä—ã –∫–∏—Å—Ç–µ–π
  const brushSizes = [2, 5, 10, 15, 20];

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  const handleTimeUp = useCallback(() => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∏—Å—É–Ω–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    const canvas = canvasRef.current;
    const drawingData = canvas.toDataURL(); // –ü–æ–ª—É—á–∞–µ–º data URL —Ä–∏—Å—É–Ω–∫–∞
    
    console.log('üé® –†–∏—Å—É–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–≥–∞–¥—ã–≤–∞–Ω–∏—é');
    
    if (onDrawingComplete) {
      onDrawingComplete(drawingData); // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∏—Å—É–Ω–∫–∞
    }
  }, [onDrawingComplete]);

  // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ–¥–∏–Ω - –µ–≥–æ –∂–µ —Å–ª–æ–≤–æ)
  useEffect(() => {
    if (words.length > 0) {
      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ–¥–∏–Ω –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å–ª–æ–≤–æ
      if (players.length === 1 || currentRound === 1) {
        setCurrentWord(words[0]);
      } else {
        // –ò–Ω–∞—á–µ –±–µ—Ä–µ–º —Å–ª–æ–≤–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ –∫—Ä—É–≥—É
        const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;
        setCurrentPlayerIndex(nextPlayerIndex);
        setCurrentWord(words[nextPlayerIndex] || words[0]);
      }
    }
  }, [words, players, currentRound, currentPlayerIndex]);

  // –¢–∞–π–º–µ—Ä —Ä–∏—Å–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    if (timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else {
      // –í—Ä–µ–º—è –≤—ã—à–ª–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
      handleTimeUp();
    }
  }, [timeLeft, handleTimeUp]); // –î–æ–±–∞–≤–ª–µ–Ω handleTimeUp –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas
  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ canvas
    canvas.width = 800;
    canvas.height = 500;
    ctx.fillStyle = '#FFFFFF';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.lineJoin = 'round';
    ctx.lineCap = 'round';
  }, []);

  const startDrawing = (e) => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const rect = canvas.getBoundingClientRect();
    
    ctx.strokeStyle = color;
    ctx.lineWidth = brushSize;
    
    ctx.beginPath();
    ctx.moveTo(
      e.clientX - rect.left,
      e.clientY - rect.top
    );
    
    setIsDrawing(true);
  };

  const draw = (e) => {
    if (!isDrawing) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const rect = canvas.getBoundingClientRect();
    
    ctx.lineTo(
      e.clientX - rect.left,
      e.clientY - rect.top
    );
    ctx.stroke();
  };

  const stopDrawing = () => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    ctx.closePath();
    setIsDrawing(false);
  };

  const clearCanvas = () => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    ctx.fillStyle = '#FFFFFF';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
  const handleCompleteDrawing = () => {
    handleTimeUp();
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  };

  const toggleWordVisibility = () => {
    setShowWord(!showWord);
  };

  return (
    <div className="drawing-container">
      {/* –®–∞–ø–∫–∞ */}
      <header className="drawing-header">
        <button className="back-button" onClick={onBack}>
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <div className="drawing-title">
          <h1>üé® –í—Ä–µ–º—è —Ä–∏—Å–æ–≤–∞—Ç—å!</h1>
          <div className="room-info">–ö–æ–º–Ω–∞—Ç–∞: {roomCode} | –†–∞—É–Ω–¥: {currentRound}/{totalRounds}</div>
        </div>
        <div className="timer-section">
          <div className={`timer ${timeLeft <= 10 ? 'urgent' : ''}`}>
            ‚è∞ {formatTime(timeLeft)}
          </div>
        </div>
      </header>

      <div className="drawing-content">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã */}
        <div className="tools-panel">
          <h3>üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h3>
          
          {/* –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ */}
          <div className="color-palette">
            <h4>–¶–≤–µ—Ç–∞:</h4>
            <div className="colors-grid">
              {colors.map((colorItem, index) => (
                <button
                  key={index}
                  className={`color-btn ${color === colorItem ? 'active' : ''}`}
                  style={{ backgroundColor: colorItem }}
                  onClick={() => setColor(colorItem)}
                />
              ))}
            </div>
          </div>

          {/* –†–∞–∑–º–µ—Ä –∫–∏—Å—Ç–∏ */}
          <div className="brush-sizes">
            <h4>–†–∞–∑–º–µ—Ä –∫–∏—Å—Ç–∏:</h4>
            <div className="sizes-grid">
              {brushSizes.map((size, index) => (
                <button
                  key={index}
                  className={`size-btn ${brushSize === size ? 'active' : ''}`}
                  onClick={() => setBrushSize(size)}
                >
                  <div 
                    className="brush-preview"
                    style={{ 
                      width: size, 
                      height: size,
                      backgroundColor: color 
                    }}
                  />
                </button>
              ))}
            </div>
          </div>

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="actions">
            <button className="action-btn clear" onClick={clearCanvas}>
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
            </button>
            <button className="action-btn undo">
              ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
            <button 
              className={`action-btn ${showWord ? 'hide' : 'show'}`}
              onClick={toggleWordVisibility}
            >
              {showWord ? 'üëÅÔ∏è‚Äçüó®Ô∏è –°–∫—Ä—ã—Ç—å —Å–ª–æ–≤–æ' : 'üëÅÔ∏è‚Äçüó®Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ'}
            </button>
            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è */}
            <button 
              className="action-btn complete"
              onClick={handleCompleteDrawing}
            >
              ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å
            </button>
          </div>

          {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∏—Å—Ç–∏ */}
          <div className="brush-preview-section">
            <h4>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</h4>
            <div className="preview-canvas">
              <div 
                className="preview-dot"
                style={{ 
                  width: brushSize * 2, 
                  height: brushSize * 2,
                  backgroundColor: color,
                  border: brushSize < 5 ? '1px solid #ccc' : 'none'
                }}
              />
            </div>
          </div>
        </div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - canvas */}
        <div className="drawing-area">
          {/* –°–ª–æ–≤–æ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è */}
          <div className={`word-display ${showWord ? 'visible' : 'hidden'}`}>
            <div className="word-label">–†–∏—Å—É–π—Ç–µ:</div>
            <div className="the-word">{currentWord}</div>
            <div className="word-hint">(–≠—Ç–æ —Å–ª–æ–≤–æ –ø—Ä–∏–¥—É–º–∞–ª –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫)</div>
          </div>

          {/* Canvas */}
          <div className="canvas-container">
            <canvas
              ref={canvasRef}
              onMouseDown={startDrawing}
              onMouseMove={draw}
              onMouseUp={stopDrawing}
              onMouseLeave={stopDrawing}
              onTouchStart={startDrawing}
              onTouchMove={draw}
              onTouchEnd={stopDrawing}
              className="drawing-canvas"
            />
          </div>

          {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—é */}
          <div className="drawing-tips">
            <h4>üí° –°–æ–≤–µ—Ç—ã –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è:</h4>
            <div className="tips-list">
              <span>üéØ –î–µ–ª–∞–π—Ç–µ —Ä–∏—Å—É–Ω–æ–∫ –ø–æ–Ω—è—Ç–Ω—ã–º</span>
              <span>‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞</span>
              <span>‚è±Ô∏è –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º</span>
              <span>‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {formatTime(timeLeft)}</span>
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="info-panel">
          <h3>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
          
          {/* –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ */}
          <div className="current-artist">
            <h4>üé® –°–µ–π—á–∞—Å —Ä–∏—Å—É–µ—Ç:</h4>
            <div className="artist-info">
              <div className="artist-avatar">
                {user?.login?.charAt(0).toUpperCase() || '?'}
              </div>
              <div className="artist-name">
                {user?.login || '–í—ã'}
                <span className="you-badge">(–í—ã)</span>
              </div>
            </div>
          </div>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä—ã */}
          <div className="game-progress">
            <h4>üìà –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—É–Ω–¥–∞:</h4>
            <div className="progress-bar">
              <div 
                className="progress-fill" 
                style={{ width: `${((60 - timeLeft) / 60) * 100}%` }}
              />
            </div>
            <div className="progress-text">
              {60 - timeLeft} –∏–∑ 60 —Å–µ–∫—É–Ω–¥
            </div>
          </div>

          {/* –°–ª–µ–¥—É—é—â–∏–π —Ö—É–¥–æ–∂–Ω–∏–∫ */}
          <div className="next-artist">
            <h4>‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ö—É–¥–æ–∂–Ω–∏–∫:</h4>
            <div className="next-player">
              {players.length > 1 ? (
                <>
                  <div className="next-avatar">
                    {players[(currentPlayerIndex + 1) % players.length]?.login?.charAt(0).toUpperCase() || '?'}
                  </div>
                  <div className="next-name">
                    {players[(currentPlayerIndex + 1) % players.length]?.login || '–ò–≥—Ä–æ–∫'}
                  </div>
                </>
              ) : (
                <div className="solo-mode">üéÆ –†–µ–∂–∏–º —Å–æ–ª–æ</div>
              )}
            </div>
          </div>

          {/* –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ */}
          <div className="quick-tools">
            <h4>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</h4>
            <div className="quick-buttons">
              <button 
                className="quick-btn black"
                onClick={() => setColor("#000000")}
                title="–ß–µ—Ä–Ω—ã–π"
              />
              <button 
                className="quick-btn red"
                onClick={() => setColor("#FF0000")}
                title="–ö—Ä–∞—Å–Ω—ã–π"
              />
              <button 
                className="quick-btn blue" 
                onClick={() => setColor("#0000FF")}
                title="–°–∏–Ω–∏–π"
              />
              <button 
                className="quick-btn small"
                onClick={() => setBrushSize(2)}
                title="–¢–æ–Ω–∫–∞—è –∫–∏—Å—Ç—å"
              >
                ‚Ä¢
              </button>
              <button 
                className="quick-btn large"
                onClick={() => setBrushSize(10)}
                title="–¢–æ–ª—Å—Ç–∞—è –∫–∏—Å—Ç—å"
              >
                ‚óè
              </button>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
          <div className="quick-complete">
            <button 
              className="complete-now-btn"
              onClick={handleCompleteDrawing}
            >
              üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–π—á–∞—Å
            </button>
          </div>
        </div>
      </div>

      {/* –ú–æ–±–∏–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã */}
      <div className="mobile-tools">
        <div className="mobile-colors">
          {colors.slice(0, 6).map((colorItem, index) => (
            <button
              key={index}
              className={`mobile-color-btn ${color === colorItem ? 'active' : ''}`}
              style={{ backgroundColor: colorItem }}
              onClick={() => setColor(colorItem)}
            />
          ))}
        </div>
        <div className="mobile-actions">
          <button className="mobile-action-btn" onClick={clearCanvas}>
            üóëÔ∏è
          </button>
          <button className="mobile-action-btn" onClick={toggleWordVisibility}>
            {showWord ? 'üëÅÔ∏è‚Äçüó®Ô∏è' : 'üëÅÔ∏è'}
          </button>
          <button className="mobile-action-btn complete" onClick={handleCompleteDrawing}>
            ‚úÖ
          </button>
        </div>
      </div>
    </div>
  );
}