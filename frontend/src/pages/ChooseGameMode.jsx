import React, { useState, useEffect, useCallback } from "react";
import "./ChooseGameMode.css";
import { useAuth } from '../context/AuthContext';
import { gameAPI } from '../api/api';
import { useNavigate } from 'react-router-dom';

const gameModes = [
  {
    id: "classic",
    title: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Gartic Phone",
    description: "–†–∏—Å—É–π –∏ —É–≥–∞–¥—ã–≤–∞–π –ø–æ —Ü–µ–ø–æ—á–∫–µ. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã",
    duration: "15-20 –º–∏–Ω",
    players: "4-8 –∏–≥—Ä–æ–∫–æ–≤",
    rounds: 3
  },
  {
    id: "fast",
    title: "–ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞",
    description: "–£–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±—ã—Å—Ç—Ä—ã–º–∏ —Ä–∞—É–Ω–¥–∞–º–∏",
    duration: "8-10 –º–∏–Ω",
    players: "3-6 –∏–≥—Ä–æ–∫–æ–≤",
    rounds: 2
  },
  {
    id: "marathon",
    title: "–ú–∞—Ä–∞—Ñ–æ–Ω",
    description: "–ë–æ–ª—å—à–µ —Ä–∞—É–Ω–¥–æ–≤, –±–æ–ª—å—à–µ –≤–µ—Å–µ–ª—å—è!",
    duration: "25-35 –º–∏–Ω",
    players: "4-8 –∏–≥—Ä–æ–∫–æ–≤",
    rounds: 5
  },
];

export default function ChooseGameMode({ 
  onBack, 
  onJoinByCode, 
  onRoomCreated
}) {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [selectedMode, setSelectedMode] = useState("classic");
  const [roomCode, setRoomCode] = useState("");
  const [isPrivateRoom, setIsPrivateRoom] = useState(false);
  const [roomPassword, setRoomPassword] = useState("");
  const [availableRooms, setAvailableRooms] = useState([]);
  const [loading, setLoading] = useState(false);
  const [creating, setCreating] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
  const loadAvailableRooms = useCallback(async () => {
    try {
      setLoading(true);
      const response = await gameAPI.getActiveRooms();
      const rooms = response.data.rooms || [];
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—ã: —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –∏ —Å —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
      const filteredRooms = rooms.filter(room => 
        room.status === 'waiting' && 
        room.currentplayers < room.maxplayers
      );
      
      setAvailableRooms(filteredRooms);
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç');
      setAvailableRooms([]);
    } finally {
      setLoading(false);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadAvailableRooms();
  }, [loadAvailableRooms]);

  const handleCreateRoom = async () => {
    if (!selectedMode) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã");
      return;
    }

    if (!user) {
      alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è");
      return;
    }

    try {
      setCreating(true);

      const roomData = {
        title: `–ö–æ–º–Ω–∞—Ç–∞ ${user.Login}`,
        gamemode: selectedMode,
        maxPlayers: 8,
        totalRounds: 3,
        isPrivate: false,
        password: null
      };

      const response = await gameAPI.createGame(roomData);

      if (response.data && response.data.game) {
        const gameId = response.data.game.gameid;
        
        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–Ω–∞—Ç—ã
        if (typeof onRoomCreated === "function") {
          onRoomCreated(gameId);
        }
      }

    } catch (error) {
      alert("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã");
    } finally {
      setCreating(false);
    }
  };

  const handleJoinByCodeClick = async () => {
    if (!roomCode.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã");
      return;
    }

    if (!user) {
      alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è");
      return;
    }

    try {
      setLoading(true);
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∫–æ–¥—É
      navigate(`/room/${roomCode.trim()}`);
      
      // –ò–ª–∏ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å callback
      if (typeof onJoinByCode === "function") {
        onJoinByCode(roomCode.trim());
      }

    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
    } finally {
      setLoading(false);
    }
  };

  const handleJoinRoom = async (roomId) => {
    if (!user) {
      alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è");
      return;
    }

    try {
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–Ω–∞—Ç—ã
      navigate(`/room/${roomId}`);
      
      // –ò–ª–∏ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å callback
      if (typeof onJoinByCode === "function") {
        onJoinByCode(roomId.toString());
      }

    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
    }
  };

  const handleRefresh = () => {
    loadAvailableRooms();
  };

  const getGameModeTitle = (modeId) => {
    const mode = gameModes.find(m => m.id === modeId);
    return mode ? mode.title : modeId;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
  const canJoinRoom = (room) => {
    return room.status === 'waiting' && room.currentplayers < room.maxplayers;
  };

  return (
    <div className="choose-game-container">
      <div className="choose-game-header">
        <button className="back-button" onClick={onBack}>
          –ù–∞–∑–∞–¥
        </button>
        <h2 className="choose-game-title">Gartic Phone - –í—ã–±–æ—Ä –∏–≥—Ä—ã</h2>
        {user && <div className="user-info">–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {user.login}</div>}
      </div>

      <div className="choose-game-content">
        <div className="game-modes">
          <p className="section-title">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã</p>
          <div className="game-modes-list">
            {gameModes.map((mode) => (
              <div
                key={mode.id}
                onClick={() => setSelectedMode(mode.id)}
                className={`game-mode-card ${selectedMode === mode.id ? "selected" : ""}`}
              >
                <h3>{mode.title}</h3>
                <p className="description">{mode.description}</p>
                <div className="mode-info">
                  <span>üïí {mode.duration}</span>
                  <span>üë• {mode.players}</span>
                  <span>üîÅ {mode.rounds} —Ä–∞—É–Ω–¥–æ–≤</span>
                </div>
                {selectedMode === mode.id && (
                  <div className="selected-indicator">‚úÖ –í—ã–±—Ä–∞–Ω–æ</div>
                )}
              </div>
            ))}
          </div>

          {!user ? (
            <div className="auth-warning">
              ‚ö†Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
            </div>
          ) : (
            <>
              <div className="selected-mode-info">
                <strong>–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º:</strong> {getGameModeTitle(selectedMode)}
              </div>

              <div className="room-settings">
                <div className="private-room-toggle">
                  <label className="toggle-label">
                    <input
                      type="checkbox"
                      checked={isPrivateRoom}
                      onChange={(e) => setIsPrivateRoom(e.target.checked)}
                      className="toggle-input"
                    />
                    <span className="toggle-slider"></span>
                    <span className="toggle-text">–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞</span>
                  </label>
                </div>

                {isPrivateRoom && (
                  <div className="password-input">
                    <input
                      type="password"
                      value={roomPassword}
                      onChange={(e) => setRoomPassword(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)"
                      className="password-field"
                      minLength={4}
                    />
                    <p className="password-hint">üîí –ü–∞—Ä–æ–ª—å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É</p>
                  </div>
                )}
              </div>

              <button 
                className="create-room-btn" 
                onClick={handleCreateRoom}
                disabled={creating}
              >
                {creating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : "üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É"}
              </button>
            </>
          )}
        </div>

        <div className="right-panel">
          <div className="join-by-code">
            <h3>üéØ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ –∫–æ–¥—É</h3>
            <input
              type="text"
              value={roomCode}
              onChange={(e) => setRoomCode(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã"
              disabled={!user}
            />
            <button 
              onClick={handleJoinByCodeClick} 
              disabled={!user || loading || !roomCode.trim()}
            >
              {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'}
            </button>
            {!user && <p className="auth-hint">‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</p>}
          </div>

          <div className="active-rooms">
            <div className="rooms-header">
              <h3>üé™ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã ({availableRooms.length})</h3>
              <button onClick={handleRefresh} className="refresh-button" disabled={loading}>
                {loading ? 'üîÑ' : '‚ü≥ –û–±–Ω–æ–≤–∏—Ç—å'}
              </button>
            </div>
            
            {loading ? (
              <div className="loading-message">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç...</div>
            ) : availableRooms.length > 0 ? (
              <div className="rooms-list">
                {availableRooms.map((room) => (
                  <div key={room.gameid} className="room-card">
                    <div className="room-info">
                      <div className="room-header">
                        <strong>{room.title || `–ö–æ–º–Ω–∞—Ç–∞ #${room.gameid}`}</strong>
                        <span className={`room-status ${room.status === 'waiting' ? 'active' : 'playing'}`}>
                          {room.status === 'waiting' ? 'üü¢ –û–∂–∏–¥–∞–Ω–∏–µ' : 'üéÆ –ò–≥—Ä–∞–µ—Ç—Å—è'}
                        </span>
                      </div>
                      <div className="room-details">
                        <div className="room-mode">
                          üéØ –†–µ–∂–∏–º: {getGameModeTitle(room.gamemode)}
                        </div>
                        <div className="room-players">
                          üë• –ò–≥—Ä–æ–∫–æ–≤: {room.currentplayers}/{room.maxplayers}
                        </div>
                        <div className="room-time">
                          üïí –°–æ–∑–¥–∞–Ω–∞: {new Date(room.createdat).toLocaleString()}
                        </div>
                        {room.isprivate && <div className="room-private">üîí –ü—Ä–∏–≤–∞—Ç–Ω–∞—è</div>}
                        {room.hostname && <div className="room-host">üëë –•–æ—Å—Ç: {room.hostname}</div>}
                      </div>
                    </div>
                    <button 
                      onClick={() => handleJoinRoom(room.gameid)}
                      className="join-button"
                      disabled={!user || !canJoinRoom(room)}
                    >
                      {!user ? '–í–æ–π—Ç–∏' : 
                       canJoinRoom(room) ? '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è' : 
                       room.currentplayers >= room.maxplayers ? '–ü–æ–ª–Ω–∞—è' : '–ò–≥—Ä–∞–µ—Ç—Å—è'}
                    </button>
                  </div>
                ))}
              </div>
            ) : (
              <div className="no-rooms-message">
                {user ? (
                  <>
                    üèúÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
                    <br />
                    <small>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π!</small>
                  </>
                ) : (
                  <>
                    üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                    <br />
                    <small>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–Ω–∞—Ç—ã</small>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}