import React, { useState, useEffect, useCallback } from "react";
import "./RoomPage.css";
import { useAuth } from '../context/AuthContext';

export default function RoomPage({ roomCode = "ROOM1", onBack, onSettings, onStartGame }) {
  const { user } = useAuth();
  const [players, setPlayers] = useState([]);
  const [roomInfo, setRoomInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [showCountdown, setShowCountdown] = useState(false);
  const [countdownNumber, setCountdownNumber] = useState(3);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã –∏ –∏–≥—Ä–æ–∫–æ–≤
  const loadRoomData = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', roomCode);
      
      const response = await fetch(`http://localhost:5000/api/game/${roomCode}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', data);
      
      if (!data.room) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã');
      }
      
      setRoomInfo(data.room);
      setPlayers(data.players || []);
      setError(''); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç—ã:', error);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã: ${error.message}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)
      if (error.message.includes('404') || error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')) {
        console.log('üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        const mockRoomData = {
          room: {
            gameid: roomCode,
            title: `–ö–æ–º–Ω–∞—Ç–∞ ${roomCode}`,
            gamemode: 'classic',
            status: 'waiting',
            maxplayers: 8,
            currentplayers: 1,
            currentround: 1,
            totalrounds: 3,
            createdat: new Date().toISOString()
          },
          players: [
            {
              userid: user?.userid || 1,
              login: user?.login || '–¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫',
              ishost: true,
              ready: false,
              score: 0
            }
          ]
        };
        setRoomInfo(mockRoomData.room);
        setPlayers(mockRoomData.players);
        setError(''); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
      }
    } finally {
      setLoading(false);
    }
  }, [roomCode, user]);

  useEffect(() => {
    loadRoomData();
    const interval = setInterval(loadRoomData, 3000);
    return () => clearInterval(interval);
  }, [loadRoomData]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å—á–µ—Ç–∞
  const startCountdown = useCallback(() => {
    setShowCountdown(true);
    setCountdownNumber(3);
    
    const countdownInterval = setInterval(() => {
      setCountdownNumber(prev => {
        if (prev === 1) {
          clearInterval(countdownInterval);
          setTimeout(() => {
            setShowCountdown(false);
            // –ü–ï–†–ï–•–û–î –ù–ê –°–¢–†–ê–ù–ò–¶–£ –í–í–û–î–ê –°–õ–û–í
            console.log('üéÆ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ —Å–ª–æ–≤');
            if (typeof onStartGame === "function") {
              onStartGame(roomCode, players);
            }
          }, 1000);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(countdownInterval);
  }, [roomCode, players, onStartGame]);

  const toggleReady = async () => {
    try {
      const token = localStorage.getItem('token');
      console.log('üîÑ –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomCode);
      
      const response = await fetch(`http://localhost:5000/api/game/${roomCode}/ready`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏');
      }

      const result = await response.json();
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω:', result);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      await loadRoomData();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ${error.message}`);
      
      // –õ–æ–∫–∞–ª—å–Ω–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      const updatedPlayers = players.map(player => 
        player.userid === user?.userid 
          ? { ...player, ready: !player.ready }
          : player
      );
      setPlayers(updatedPlayers);
    }
  };

  const startGame = async () => {
    try {
      const token = localStorage.getItem('token');
      console.log('üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomCode);
      
      const response = await fetch(`http://localhost:5000/api/game/${roomCode}/start`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
      }

      const result = await response.json();
      console.log('‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞:', result);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—Å—á–µ—Ç –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ alert
      startCountdown();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:', error);
      alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É: ${error.message}`);
    }
  };

  const copyRoomCode = () => {
    navigator.clipboard.writeText(roomCode).then(() => {
      alert("–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!");
    }).catch(() => {
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã");
    });
  };

  const handleRefresh = () => {
    setLoading(true);
    loadRoomData();
  };

  if (loading) {
    return (
      <div className="room-page-container">
        <div className="loading-message">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã...</div>
      </div>
    );
  }

  if (error && !roomInfo) {
    return (
      <div className="room-page-container">
        <div className="error-message">‚ùå {error}</div>
        <button onClick={onBack} className="back-button">–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã</button>
        <button onClick={handleRefresh} className="refresh-button">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É</button>
      </div>
    );
  }

  if (!roomInfo) {
    return (
      <div className="room-page-container">
        <div className="error-message">‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</div>
        <button onClick={onBack} className="back-button">–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã</button>
      </div>
    );
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤
  const currentPlayer = players.find(p => p.userid === user?.userid);
  const youReady = currentPlayer?.ready || false;
  const youAreHost = currentPlayer?.ishost || false;

  const totalPlayers = roomInfo.maxplayers || 8;
  const currentPlayers = roomInfo.currentplayers || players.length;
  const readyCount = players.filter(p => p.ready).length;
  const allReady = players.length > 0 && players.every(p => p.ready);

  return (
    <>
      {/* –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –æ—Ç—Å—á–µ—Ç */}
      {showCountdown && (
        <div className="countdown-overlay">
          <div className="countdown-container">
            <div className={`countdown-number ${countdownNumber === 0 ? 'go' : ''}`}>
              {countdownNumber === 0 ? "LET'S GOOOO!" : countdownNumber}
            </div>
            <div className="countdown-background"></div>
          </div>
        </div>
      )}

      <div className="room-page-container">
        <header className="room-header">
          <button className="back-button" title="–ù–∞–∑–∞–¥" onClick={onBack}>
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          <div className="room-title">
            <h2>{roomInfo.title || `–ö–æ–º–Ω–∞—Ç–∞ ${roomCode}`}</h2>
            <div className="subheading">
              {roomInfo.status === 'waiting' ? 'üü¢ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...' : 
               roomInfo.status === 'playing' ? 'üéÆ –ò–≥—Ä–∞ –∏–¥–µ—Ç' : 'üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}
            </div>
          </div>
          <div className="step-indicator">
            <div className="circle">1</div>
          </div>
          <button className="settings-button" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏" onClick={onSettings}>
            ‚öô
          </button>
        </header>

        {error && (
          <div className="connection-error">
            ‚ö†Ô∏è {error}
            <button onClick={handleRefresh} className="retry-btn">
              –û–±–Ω–æ–≤–∏—Ç—å
            </button>
          </div>
        )}

        <div className="room-content">
          <div className="room-info-panel">
            <h3>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ</h3>
            <div className="room-info-row">
              <span>–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:</span>
              <span className="code">
                {roomCode}
                <button className="copy-btn" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å" onClick={copyRoomCode}>
                  üìã
                </button>
              </span>
            </div>
            <div className="room-info-row">
              <span>–†–µ–∂–∏–º –∏–≥—Ä—ã:</span>
              <span>{roomInfo.gamemode || '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π'}</span>
            </div>
            <div className="room-info-row">
              <span>–ò–≥—Ä–æ–∫–æ–≤:</span>
              <span>üë• {currentPlayers}/{totalPlayers}</span>
            </div>
            <div className="room-info-row">
              <span>–ì–æ—Ç–æ–≤—ã:</span>
              <span className="ready-count" style={{ color: readyCount > 0 ? "green" : "inherit" }}>
                {readyCount}/{currentPlayers}
              </span>
            </div>
            <div className="room-info-row">
              <span>–†–∞—É–Ω–¥—ã:</span>
              <span>{roomInfo.currentround || 1}/{roomInfo.totalrounds || 3}</span>
            </div>
            {roomInfo.hostname && (
              <div className="room-info-row">
                <span>–°–æ–∑–¥–∞—Ç–µ–ª—å:</span>
                <span>üëë {roomInfo.hostname}</span>
              </div>
            )}
          </div>

          <div className="players-panel">
            <div className="players-header">
              <h3>üë• –ò–≥—Ä–æ–∫–∏ ({currentPlayers}/{totalPlayers})</h3>
              <button onClick={handleRefresh} className="refresh-btn" title="–û–±–Ω–æ–≤–∏—Ç—å">
                üîÑ
              </button>
            </div>

            <div className="players-grid">
              {players.map((player) => (
                <div key={player.userid} className={`player-card ${player.ishost ? 'host' : ''}`}>
                  <div className="player-main">
                    <div className="avatar">
                      {player.login?.charAt(0).toUpperCase() || '?'}
                    </div>
                    <div className="player-info">
                      <div className="player-name">
                        {player.login}
                        {player.ishost && <span className="host-badge">üëë –•–æ—Å—Ç</span>}
                        {player.userid === user?.userid && <span className="you-label">(–í—ã)</span>}
                      </div>
                      <div className={`player-status ${player.ready ? 'ready' : 'not-ready'}`}>
                        {player.ready ? "‚úÖ –ì–æ—Ç–æ–≤" : "‚ùå –ù–µ –≥–æ—Ç–æ–≤"}
                      </div>
                      <div className="player-score">
                        üèÜ –û—á–∫–∏: {user?.points || 0}
                      </div>
                    </div>
                  </div>
                </div>
              ))}

              {[...Array(totalPlayers - currentPlayers)].map((_, i) => (
                <div key={`empty-${i}`} className="player-card empty-slot">
                  <div className="empty-text">‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞...</div>
                </div>
              ))}
            </div>

            {/* –ö–ù–û–ü–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –î–õ–Ø –í–°–ï–• –ò–ì–†–û–ö–û–í (–í–ö–õ–Æ–ß–ê–Ø –•–û–°–¢–ê) */}
            {roomInfo.status === 'waiting' && currentPlayer && (
              <div className="ready-section">
                <button
                  className={`ready-button ${youReady ? "ready" : "not-ready"}`}
                  onClick={toggleReady}
                >
                  {youReady ? "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å" : "‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ"}
                </button>
                <div className="ready-hint">
                  {youAreHost 
                    ? "–ö–∞–∫ —Ö–æ—Å—Ç, –≤—ã —Ç–æ–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É" 
                    : "–ù–∞–∂–º–∏—Ç–µ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É"}
                </div>
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –¥–ª—è —Ö–æ—Å—Ç–∞ */}
            {youAreHost && roomInfo.status === 'waiting' && (
              <button 
                className={`play-button ${allReady ? 'active' : 'disabled'}`}
                onClick={startGame}
                disabled={!allReady}
              >
                {allReady ? 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É!' : `–ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (${readyCount}/${currentPlayers})`}
              </button>
            )}

            {roomInfo.status === 'playing' && (
              <div className="game-started-message">
                üéÆ –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å! –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞...
              </div>
            )}

            {roomInfo.status === 'finished' && (
              <div className="game-finished-message">
                üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
}